// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class IntifaceEngineFlutterBridge {
  Future<bool> runtimeStarted({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRuntimeStartedConstMeta;

  Stream<String> runEngine({required EngineOptionsExternal args, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRunEngineConstMeta;

  Future<void> send({required String msgJson, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendConstMeta;

  Future<void> stopEngine({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopEngineConstMeta;

  Future<void> sendBackendServerMessage({required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendBackendServerMessageConstMeta;

  Future<List<(String, ExposedWebsocketSpecifier)>>
      getUserCommunicationSpecifiers(
          {required String userConfig, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUserCommunicationSpecifiersConstMeta;

  Future<List<(ExposedUserDeviceIdentifier, ExposedUserDeviceDefinition)>>
      getUserDeviceDefinitions({required String userConfig, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetUserDeviceDefinitionsConstMeta;

  Future<List<String>> getProtocolNames({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetProtocolNamesConstMeta;

  Stream<String> setupLogging({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetupLoggingConstMeta;

  Future<void> shutdownLogging({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kShutdownLoggingConstMeta;

  Future<void> crashReporting({required String sentryApiKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCrashReportingConstMeta;
}

enum ButtplugActuatorFeatureMessageType {
  ScalarCmd,
  RotateCmd,
  LinearCmd,
}

enum ButtplugSensorFeatureMessageType {
  SensorReadCmd,
  SensorSubscribeCmd,
}

class EngineOptionsExternal {
  final String? deviceConfigJson;
  final String? userDeviceConfigJson;
  final String? userDeviceConfigPath;
  final String serverName;
  final bool websocketUseAllInterfaces;
  final int? websocketPort;
  final int? frontendWebsocketPort;
  final bool frontendInProcessChannel;
  final int maxPingTime;
  final bool allowRawMessages;
  final bool useBluetoothLe;
  final bool useSerialPort;
  final bool useHid;
  final bool useLovenseDongleSerial;
  final bool useLovenseDongleHid;
  final bool useXinput;
  final bool useLovenseConnect;
  final bool useDeviceWebsocketServer;
  final int? deviceWebsocketServerPort;
  final bool crashMainThread;
  final bool crashTaskThread;
  final String? websocketClientAddress;
  final bool broadcastServerMdns;
  final String? mdnsSuffix;
  final bool repeaterMode;
  final int? repeaterLocalPort;
  final String? repeaterRemoteAddress;

  const EngineOptionsExternal({
    this.deviceConfigJson,
    this.userDeviceConfigJson,
    this.userDeviceConfigPath,
    required this.serverName,
    required this.websocketUseAllInterfaces,
    this.websocketPort,
    this.frontendWebsocketPort,
    required this.frontendInProcessChannel,
    required this.maxPingTime,
    required this.allowRawMessages,
    required this.useBluetoothLe,
    required this.useSerialPort,
    required this.useHid,
    required this.useLovenseDongleSerial,
    required this.useLovenseDongleHid,
    required this.useXinput,
    required this.useLovenseConnect,
    required this.useDeviceWebsocketServer,
    this.deviceWebsocketServerPort,
    required this.crashMainThread,
    required this.crashTaskThread,
    this.websocketClientAddress,
    required this.broadcastServerMdns,
    this.mdnsSuffix,
    required this.repeaterMode,
    this.repeaterLocalPort,
    this.repeaterRemoteAddress,
  });
}

class ExposedDeviceFeature {
  final String description;
  final FeatureType featureType;
  final ExposedDeviceFeatureActuator? actuator;
  final ExposedDeviceFeatureSensor? sensor;

  const ExposedDeviceFeature({
    required this.description,
    required this.featureType,
    this.actuator,
    this.sensor,
  });
}

class ExposedDeviceFeatureActuator {
  final (int, int) stepRange;
  final (int, int) stepLimit;
  final List<ButtplugActuatorFeatureMessageType> messages;

  const ExposedDeviceFeatureActuator({
    required this.stepRange,
    required this.stepLimit,
    required this.messages,
  });
}

class ExposedDeviceFeatureSensor {
  final List<(int, int)> valueRange;
  final List<ButtplugSensorFeatureMessageType> messages;

  const ExposedDeviceFeatureSensor({
    required this.valueRange,
    required this.messages,
  });
}

class ExposedUserDeviceCustomization {
  final String? displayName;
  final bool allow;
  final bool deny;
  final int index;

  const ExposedUserDeviceCustomization({
    this.displayName,
    required this.allow,
    required this.deny,
    required this.index,
  });
}

class ExposedUserDeviceDefinition {
  final String name;
  final List<ExposedDeviceFeature> features;
  final ExposedUserDeviceCustomization userConfig;

  const ExposedUserDeviceDefinition({
    required this.name,
    required this.features,
    required this.userConfig,
  });
}

class ExposedUserDeviceIdentifier {
  final String address;
  final String protocol;
  final String? identifier;

  const ExposedUserDeviceIdentifier({
    required this.address,
    required this.protocol,
    this.identifier,
  });
}

class ExposedWebsocketSpecifier {
  final List<String> names;

  const ExposedWebsocketSpecifier({
    required this.names,
  });
}

enum FeatureType {
  Unknown,
  Vibrate,
  Rotate,
  Oscillate,
  Constrict,
  Inflate,
  Position,
  Battery,
  RSSI,
  Button,
  Pressure,
  Raw,
}

class IntifaceEngineFlutterBridgeImpl implements IntifaceEngineFlutterBridge {
  final IntifaceEngineFlutterBridgePlatform _platform;
  factory IntifaceEngineFlutterBridgeImpl(ExternalLibrary dylib) =>
      IntifaceEngineFlutterBridgeImpl.raw(
          IntifaceEngineFlutterBridgePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory IntifaceEngineFlutterBridgeImpl.wasm(FutureOr<WasmModule> module) =>
      IntifaceEngineFlutterBridgeImpl(module as ExternalLibrary);
  IntifaceEngineFlutterBridgeImpl.raw(this._platform);
  Future<bool> runtimeStarted({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_runtime_started(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kRuntimeStartedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRuntimeStartedConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "runtime_started",
        argNames: [],
      );

  Stream<String> runEngine(
      {required EngineOptionsExternal args, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_engine_options_external(args);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_run_engine(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRunEngineConstMeta,
      argValues: [args],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRunEngineConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "run_engine",
        argNames: ["args"],
      );

  Future<void> send({required String msgJson, dynamic hint}) {
    var arg0 = _platform.api2wire_String(msgJson);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSendConstMeta,
      argValues: [msgJson],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send",
        argNames: ["msgJson"],
      );

  Future<void> stopEngine({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop_engine(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kStopEngineConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopEngineConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_engine",
        argNames: [],
      );

  Future<void> sendBackendServerMessage({required String msg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_send_backend_server_message(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSendBackendServerMessageConstMeta,
      argValues: [msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendBackendServerMessageConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "send_backend_server_message",
        argNames: ["msg"],
      );

  Future<List<(String, ExposedWebsocketSpecifier)>>
      getUserCommunicationSpecifiers(
          {required String userConfig, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_user_communication_specifiers(port_, arg0),
      parseSuccessData:
          _wire2api_list___record__String_exposed_websocket_specifier,
      parseErrorData: null,
      constMeta: kGetUserCommunicationSpecifiersConstMeta,
      argValues: [userConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUserCommunicationSpecifiersConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_user_communication_specifiers",
        argNames: ["userConfig"],
      );

  Future<List<(ExposedUserDeviceIdentifier, ExposedUserDeviceDefinition)>>
      getUserDeviceDefinitions({required String userConfig, dynamic hint}) {
    var arg0 = _platform.api2wire_String(userConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) =>
          _platform.inner.wire_get_user_device_definitions(port_, arg0),
      parseSuccessData:
          _wire2api_list___record__exposed_user_device_identifier_exposed_user_device_definition,
      parseErrorData: null,
      constMeta: kGetUserDeviceDefinitionsConstMeta,
      argValues: [userConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetUserDeviceDefinitionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_user_device_definitions",
        argNames: ["userConfig"],
      );

  Future<List<String>> getProtocolNames({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_protocol_names(port_),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kGetProtocolNamesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetProtocolNamesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_protocol_names",
        argNames: [],
      );

  Stream<String> setupLogging({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_setup_logging(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kSetupLoggingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetupLoggingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "setup_logging",
        argNames: [],
      );

  Future<void> shutdownLogging({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_shutdown_logging(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kShutdownLoggingConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kShutdownLoggingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "shutdown_logging",
        argNames: [],
      );

  Future<void> crashReporting({required String sentryApiKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(sentryApiKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_crash_reporting(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kCrashReportingConstMeta,
      argValues: [sentryApiKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCrashReportingConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "crash_reporting",
        argNames: ["sentryApiKey"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  (String, ExposedWebsocketSpecifier)
      _wire2api___record__String_exposed_websocket_specifier(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_String(arr[0]),
      _wire2api_exposed_websocket_specifier(arr[1]),
    );
  }

  (
    ExposedUserDeviceIdentifier,
    ExposedUserDeviceDefinition
  ) _wire2api___record__exposed_user_device_identifier_exposed_user_device_definition(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_exposed_user_device_identifier(arr[0]),
      _wire2api_exposed_user_device_definition(arr[1]),
    );
  }

  (int, int) _wire2api___record__i32_i32(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_i32(arr[0]),
      _wire2api_i32(arr[1]),
    );
  }

  (int, int) _wire2api___record__u32_u32(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      _wire2api_u32(arr[0]),
      _wire2api_u32(arr[1]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  ExposedDeviceFeatureActuator
      _wire2api_box_autoadd_exposed_device_feature_actuator(dynamic raw) {
    return _wire2api_exposed_device_feature_actuator(raw);
  }

  ExposedDeviceFeatureSensor
      _wire2api_box_autoadd_exposed_device_feature_sensor(dynamic raw) {
    return _wire2api_exposed_device_feature_sensor(raw);
  }

  ButtplugActuatorFeatureMessageType
      _wire2api_buttplug_actuator_feature_message_type(dynamic raw) {
    return ButtplugActuatorFeatureMessageType.values[raw as int];
  }

  ButtplugSensorFeatureMessageType
      _wire2api_buttplug_sensor_feature_message_type(dynamic raw) {
    return ButtplugSensorFeatureMessageType.values[raw as int];
  }

  ExposedDeviceFeature _wire2api_exposed_device_feature(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ExposedDeviceFeature(
      description: _wire2api_String(arr[0]),
      featureType: _wire2api_feature_type(arr[1]),
      actuator:
          _wire2api_opt_box_autoadd_exposed_device_feature_actuator(arr[2]),
      sensor: _wire2api_opt_box_autoadd_exposed_device_feature_sensor(arr[3]),
    );
  }

  ExposedDeviceFeatureActuator _wire2api_exposed_device_feature_actuator(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExposedDeviceFeatureActuator(
      stepRange: _wire2api___record__u32_u32(arr[0]),
      stepLimit: _wire2api___record__u32_u32(arr[1]),
      messages: _wire2api_list_buttplug_actuator_feature_message_type(arr[2]),
    );
  }

  ExposedDeviceFeatureSensor _wire2api_exposed_device_feature_sensor(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExposedDeviceFeatureSensor(
      valueRange: _wire2api_list___record__i32_i32(arr[0]),
      messages: _wire2api_list_buttplug_sensor_feature_message_type(arr[1]),
    );
  }

  ExposedUserDeviceCustomization _wire2api_exposed_user_device_customization(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ExposedUserDeviceCustomization(
      displayName: _wire2api_opt_String(arr[0]),
      allow: _wire2api_bool(arr[1]),
      deny: _wire2api_bool(arr[2]),
      index: _wire2api_u32(arr[3]),
    );
  }

  ExposedUserDeviceDefinition _wire2api_exposed_user_device_definition(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExposedUserDeviceDefinition(
      name: _wire2api_String(arr[0]),
      features: _wire2api_list_exposed_device_feature(arr[1]),
      userConfig: _wire2api_exposed_user_device_customization(arr[2]),
    );
  }

  ExposedUserDeviceIdentifier _wire2api_exposed_user_device_identifier(
      dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExposedUserDeviceIdentifier(
      address: _wire2api_String(arr[0]),
      protocol: _wire2api_String(arr[1]),
      identifier: _wire2api_opt_String(arr[2]),
    );
  }

  ExposedWebsocketSpecifier _wire2api_exposed_websocket_specifier(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ExposedWebsocketSpecifier(
      names: _wire2api_StringList(arr[0]),
    );
  }

  FeatureType _wire2api_feature_type(dynamic raw) {
    return FeatureType.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<(String, ExposedWebsocketSpecifier)>
      _wire2api_list___record__String_exposed_websocket_specifier(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api___record__String_exposed_websocket_specifier)
        .toList();
  }

  List<(ExposedUserDeviceIdentifier, ExposedUserDeviceDefinition)>
      _wire2api_list___record__exposed_user_device_identifier_exposed_user_device_definition(
          dynamic raw) {
    return (raw as List<dynamic>)
        .map(
            _wire2api___record__exposed_user_device_identifier_exposed_user_device_definition)
        .toList();
  }

  List<(int, int)> _wire2api_list___record__i32_i32(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api___record__i32_i32).toList();
  }

  List<ButtplugActuatorFeatureMessageType>
      _wire2api_list_buttplug_actuator_feature_message_type(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_buttplug_actuator_feature_message_type)
        .toList();
  }

  List<ButtplugSensorFeatureMessageType>
      _wire2api_list_buttplug_sensor_feature_message_type(dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_buttplug_sensor_feature_message_type)
        .toList();
  }

  List<ExposedDeviceFeature> _wire2api_list_exposed_device_feature(
      dynamic raw) {
    return (raw as List<dynamic>)
        .map(_wire2api_exposed_device_feature)
        .toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  ExposedDeviceFeatureActuator?
      _wire2api_opt_box_autoadd_exposed_device_feature_actuator(dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_exposed_device_feature_actuator(raw);
  }

  ExposedDeviceFeatureSensor?
      _wire2api_opt_box_autoadd_exposed_device_feature_sensor(dynamic raw) {
    return raw == null
        ? null
        : _wire2api_box_autoadd_exposed_device_feature_sensor(raw);
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class IntifaceEngineFlutterBridgePlatform
    extends FlutterRustBridgeBase<IntifaceEngineFlutterBridgeWire> {
  IntifaceEngineFlutterBridgePlatform(ffi.DynamicLibrary dylib)
      : super(IntifaceEngineFlutterBridgeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_EngineOptionsExternal>
      api2wire_box_autoadd_engine_options_external(EngineOptionsExternal raw) {
    final ptr = inner.new_box_autoadd_engine_options_external_0();
    _api_fill_to_wire_engine_options_external(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint16> api2wire_box_autoadd_u16(int raw) {
    return inner.new_box_autoadd_u16_0(api2wire_u16(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint16> api2wire_opt_box_autoadd_u16(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u16(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_engine_options_external(
      EngineOptionsExternal apiObj,
      ffi.Pointer<wire_EngineOptionsExternal> wireObj) {
    _api_fill_to_wire_engine_options_external(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_engine_options_external(
      EngineOptionsExternal apiObj, wire_EngineOptionsExternal wireObj) {
    wireObj.device_config_json = api2wire_opt_String(apiObj.deviceConfigJson);
    wireObj.user_device_config_json =
        api2wire_opt_String(apiObj.userDeviceConfigJson);
    wireObj.user_device_config_path =
        api2wire_opt_String(apiObj.userDeviceConfigPath);
    wireObj.server_name = api2wire_String(apiObj.serverName);
    wireObj.websocket_use_all_interfaces =
        api2wire_bool(apiObj.websocketUseAllInterfaces);
    wireObj.websocket_port = api2wire_opt_box_autoadd_u16(apiObj.websocketPort);
    wireObj.frontend_websocket_port =
        api2wire_opt_box_autoadd_u16(apiObj.frontendWebsocketPort);
    wireObj.frontend_in_process_channel =
        api2wire_bool(apiObj.frontendInProcessChannel);
    wireObj.max_ping_time = api2wire_u32(apiObj.maxPingTime);
    wireObj.allow_raw_messages = api2wire_bool(apiObj.allowRawMessages);
    wireObj.use_bluetooth_le = api2wire_bool(apiObj.useBluetoothLe);
    wireObj.use_serial_port = api2wire_bool(apiObj.useSerialPort);
    wireObj.use_hid = api2wire_bool(apiObj.useHid);
    wireObj.use_lovense_dongle_serial =
        api2wire_bool(apiObj.useLovenseDongleSerial);
    wireObj.use_lovense_dongle_hid = api2wire_bool(apiObj.useLovenseDongleHid);
    wireObj.use_xinput = api2wire_bool(apiObj.useXinput);
    wireObj.use_lovense_connect = api2wire_bool(apiObj.useLovenseConnect);
    wireObj.use_device_websocket_server =
        api2wire_bool(apiObj.useDeviceWebsocketServer);
    wireObj.device_websocket_server_port =
        api2wire_opt_box_autoadd_u16(apiObj.deviceWebsocketServerPort);
    wireObj.crash_main_thread = api2wire_bool(apiObj.crashMainThread);
    wireObj.crash_task_thread = api2wire_bool(apiObj.crashTaskThread);
    wireObj.websocket_client_address =
        api2wire_opt_String(apiObj.websocketClientAddress);
    wireObj.broadcast_server_mdns = api2wire_bool(apiObj.broadcastServerMdns);
    wireObj.mdns_suffix = api2wire_opt_String(apiObj.mdnsSuffix);
    wireObj.repeater_mode = api2wire_bool(apiObj.repeaterMode);
    wireObj.repeater_local_port =
        api2wire_opt_box_autoadd_u16(apiObj.repeaterLocalPort);
    wireObj.repeater_remote_address =
        api2wire_opt_String(apiObj.repeaterRemoteAddress);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class IntifaceEngineFlutterBridgeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  IntifaceEngineFlutterBridgeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  IntifaceEngineFlutterBridgeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_runtime_started(
    int port_,
  ) {
    return _wire_runtime_started(
      port_,
    );
  }

  late final _wire_runtime_startedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_runtime_started');
  late final _wire_runtime_started =
      _wire_runtime_startedPtr.asFunction<void Function(int)>();

  void wire_run_engine(
    int port_,
    ffi.Pointer<wire_EngineOptionsExternal> args,
  ) {
    return _wire_run_engine(
      port_,
      args,
    );
  }

  late final _wire_run_enginePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_EngineOptionsExternal>)>>('wire_run_engine');
  late final _wire_run_engine = _wire_run_enginePtr.asFunction<
      void Function(int, ffi.Pointer<wire_EngineOptionsExternal>)>();

  void wire_send(
    int port_,
    ffi.Pointer<wire_uint_8_list> msg_json,
  ) {
    return _wire_send(
      port_,
      msg_json,
    );
  }

  late final _wire_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_send');
  late final _wire_send = _wire_sendPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_stop_engine(
    int port_,
  ) {
    return _wire_stop_engine(
      port_,
    );
  }

  late final _wire_stop_enginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_engine');
  late final _wire_stop_engine =
      _wire_stop_enginePtr.asFunction<void Function(int)>();

  void wire_send_backend_server_message(
    int port_,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_send_backend_server_message(
      port_,
      msg,
    );
  }

  late final _wire_send_backend_server_messagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_send_backend_server_message');
  late final _wire_send_backend_server_message =
      _wire_send_backend_server_messagePtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_user_communication_specifiers(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_config,
  ) {
    return _wire_get_user_communication_specifiers(
      port_,
      user_config,
    );
  }

  late final _wire_get_user_communication_specifiersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_user_communication_specifiers');
  late final _wire_get_user_communication_specifiers =
      _wire_get_user_communication_specifiersPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_user_device_definitions(
    int port_,
    ffi.Pointer<wire_uint_8_list> user_config,
  ) {
    return _wire_get_user_device_definitions(
      port_,
      user_config,
    );
  }

  late final _wire_get_user_device_definitionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_get_user_device_definitions');
  late final _wire_get_user_device_definitions =
      _wire_get_user_device_definitionsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_protocol_names(
    int port_,
  ) {
    return _wire_get_protocol_names(
      port_,
    );
  }

  late final _wire_get_protocol_namesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_protocol_names');
  late final _wire_get_protocol_names =
      _wire_get_protocol_namesPtr.asFunction<void Function(int)>();

  void wire_setup_logging(
    int port_,
  ) {
    return _wire_setup_logging(
      port_,
    );
  }

  late final _wire_setup_loggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_setup_logging');
  late final _wire_setup_logging =
      _wire_setup_loggingPtr.asFunction<void Function(int)>();

  void wire_shutdown_logging(
    int port_,
  ) {
    return _wire_shutdown_logging(
      port_,
    );
  }

  late final _wire_shutdown_loggingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_shutdown_logging');
  late final _wire_shutdown_logging =
      _wire_shutdown_loggingPtr.asFunction<void Function(int)>();

  void wire_crash_reporting(
    int port_,
    ffi.Pointer<wire_uint_8_list> sentry_api_key,
  ) {
    return _wire_crash_reporting(
      port_,
      sentry_api_key,
    );
  }

  late final _wire_crash_reportingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_crash_reporting');
  late final _wire_crash_reporting = _wire_crash_reportingPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_EngineOptionsExternal>
      new_box_autoadd_engine_options_external_0() {
    return _new_box_autoadd_engine_options_external_0();
  }

  late final _new_box_autoadd_engine_options_external_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_EngineOptionsExternal> Function()>>(
      'new_box_autoadd_engine_options_external_0');
  late final _new_box_autoadd_engine_options_external_0 =
      _new_box_autoadd_engine_options_external_0Ptr
          .asFunction<ffi.Pointer<wire_EngineOptionsExternal> Function()>();

  ffi.Pointer<ffi.Uint16> new_box_autoadd_u16_0(
    int value,
  ) {
    return _new_box_autoadd_u16_0(
      value,
    );
  }

  late final _new_box_autoadd_u16_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Uint16)>>(
          'new_box_autoadd_u16_0');
  late final _new_box_autoadd_u16_0 = _new_box_autoadd_u16_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();

  int JNI_OnLoad(
    int vm,
    ffi.Pointer<ffi.Void> _res,
  ) {
    return _JNI_OnLoad(
      vm,
      _res,
    );
  }

  late final _JNI_OnLoadPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'JNI_OnLoad');
  late final _JNI_OnLoad =
      _JNI_OnLoadPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_EngineOptionsExternal extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_config_json;

  external ffi.Pointer<wire_uint_8_list> user_device_config_json;

  external ffi.Pointer<wire_uint_8_list> user_device_config_path;

  external ffi.Pointer<wire_uint_8_list> server_name;

  @ffi.Bool()
  external bool websocket_use_all_interfaces;

  external ffi.Pointer<ffi.Uint16> websocket_port;

  external ffi.Pointer<ffi.Uint16> frontend_websocket_port;

  @ffi.Bool()
  external bool frontend_in_process_channel;

  @ffi.Uint32()
  external int max_ping_time;

  @ffi.Bool()
  external bool allow_raw_messages;

  @ffi.Bool()
  external bool use_bluetooth_le;

  @ffi.Bool()
  external bool use_serial_port;

  @ffi.Bool()
  external bool use_hid;

  @ffi.Bool()
  external bool use_lovense_dongle_serial;

  @ffi.Bool()
  external bool use_lovense_dongle_hid;

  @ffi.Bool()
  external bool use_xinput;

  @ffi.Bool()
  external bool use_lovense_connect;

  @ffi.Bool()
  external bool use_device_websocket_server;

  external ffi.Pointer<ffi.Uint16> device_websocket_server_port;

  @ffi.Bool()
  external bool crash_main_thread;

  @ffi.Bool()
  external bool crash_task_thread;

  external ffi.Pointer<wire_uint_8_list> websocket_client_address;

  @ffi.Bool()
  external bool broadcast_server_mdns;

  external ffi.Pointer<wire_uint_8_list> mdns_suffix;

  @ffi.Bool()
  external bool repeater_mode;

  external ffi.Pointer<ffi.Uint16> repeater_local_port;

  external ffi.Pointer<wire_uint_8_list> repeater_remote_address;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
